> Projects
Description: This collection is used to describe the main characteristics of each project in our dataset, 
including time series distributions of activities designed in the project, and the projects features.

{   'project_id': project.create_id(),                                   # Name used to identify the project (Composed by the concatenation of project name and owner)
    'name': repository['name'],                                          # Project name
    'owner': repository['owner']['login'],                               # Project owner
    'owner_type': owner_type,                                            # Project owner type (A owner can be user or organization)
    'domain': domain,                                                    # Project application domain (For example: Web Library, System Software or Framework)
    'license': license,                                                  # Project License (For example: GNU or MIT)
    'created_at': repository['created_at'],                              # Project creation date
    'updated_at': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),         # Last date when we extracted data from this project
    'main_language': main_language,                                      # Project most used language
    'github_url': repository['html_url'],                                # Project address on GitHub
    'statistics': {'pulls_merged_total': len(numpy.nan_to_num(pull_merged_total)), # Total of merged pull-requests in the repository
                    'newcomers_total': len(numpy.nan_to_num(newcomers)),           # Total of newcomers
                    'open_issues_total': open_issues,                              # Total of open issues in the issue tracker
                    'used_languages_total': len(used_languages),                   # Total of used languages in the repository
                    'forks_total': len(numpy.nan_to_num(fork_total)),              # Total of forks in the repository
                    'stars_total': len(numpy.nan_to_num(star_total)),              # Total of stars in the repository
                    'commits_total': len(numpy.nan_to_num(commit_total)),          # Total of commits in the repository
                    'contributors_total': len(contributors),                       # Total of contributors in the repository
                    'core_members_total': len(core_members),                       # Total of core contributors in the repository
                    'comments_median': int(numpy.nan_to_num(numpy.median(comments))),                           # Median of comments in the merged pull-requests
                    'lines_modified_median': int(numpy.nan_to_num(numpy.median(lines_modified))),               # Median of lines modified in the merged pull-requests
                    'files_modified_median': int(numpy.nan_to_num(numpy.median(files_modified))),               # Median of files changed in the merged pull-requests
                    'time_for_merge_median': int(numpy.nan_to_num(numpy.median(time_for_merge))),               # Median of time to merge pull-requests
                    'time_for_first_review_median': int(numpy.nan_to_num(numpy.median(time_for_first_review)))  # Median of time to answer merged pull-requests
                    },
    'time_series': {'newcomers_ts': Counter(newcomers),                                                            # Time series of newcomers per day
                    'pulls_merged_ts': Counter([pull_request['merged_at'] for pull_request in pull_merged_total]), # Time series of pull-requests per day
                    'forks_ts': Counter(fork_total),                                                               # Time series of forks per day
                    'stars_ts': Counter(star_total),                                                               # Time series of stars per day
                    'commits_ts': Counter(commit_total)                                                            # Time series of commits per day
                    },
    'features': {'has_contributing': has_contributing,   # True if the project have a CONTRIBUTING.md file
                 'has_readme': has_readme,               # True if the project have a README.md file
                 'has_wiki': has_wiki,                   # True if the project have a wiki section
                 'has_issue_tracker': has_issue_tracker  # True if the project have a issue tracking system
                }
    }